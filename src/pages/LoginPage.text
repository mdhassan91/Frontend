import React from 'react';
import { useNavigate } from 'react-router-dom';
import AuthForm from '../components/AuthForm';

const LoginPage = ({ onLogin }) => {
  const navigate = useNavigate();

  // const handleLogin = (credentials) => {
  //   // Simulate an API call with dummy data
  //   const dummyUsers = [
  //     { username: 'user', password: 'userpass', role: 'user' },
  //     { username: 'manager', password: 'managerpass', role: 'manager' },
  //     { username: 'movieseller', password: 'moviesellerpass', role: 'movie-seller' },
  //     { username: 'eventmanager', password: 'eventmanagerpass', role: 'event-manager' },
  //     { username: 'superadmin', password: 'superadminpass', role: 'super-admin' },
  //     { username: 'manager', password: 'managerpass2', role: 'user' },
  //   ];

  //   const user = dummyUsers.find(
  //     (u) => u.username === credentials.username && u.password === credentials.password
  //   );

  //   if (user) {
  //     onLogin(user.role); // Optionally set role in parent component if needed
  //     navigate(
  //       user.role === 'user' ? '/user-home' :
  //         user.role === 'manager' ? '/manager-home' :
  //           user.role === 'movie-seller' ? '/movie-seller-home' :
  //             user.role === 'event-manager' ? '/event-manager-home' :
  //               user.role === 'super-admin' ? '/super-admin-home' :
  //                 '/login'
  //     );
  //   } else {
  //     alert('Invalid credentials');
  //   }
  // };
  const handleLogin = async (credentials) => {
    // Call your API to login and get user role
    const response = await fetch('https://movie.amirrezasoltani.ir/user/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(credentials),
    });

    const data = await response.json();
    console.log(data);
    // onLogin(data.role);
  };

  return (
    <>
  {/* <AuthForm isSignup={false} onSubmit={handleLogin} /> */}
  
</>);
};

export default LoginPage;

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const LoginPage = ({ onLogin }) => {
  const [email, setEmail] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (event) => {
    event.preventDefault(); // Prevent the default form submission

    // const credentials = { username, password };
    const credentials = { Username: username, Email: email, Password: password };

    console.log({ username, password });


    try {
      const response = await fetch('https://movie.amirrezasoltani.ir/user/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log(data);
      if (data && data.role) {
        onLogin(data.role); // Optionally set role in parent component if needed
        navigate(
          data.role === 'user' ? '/user-home' :
          data.role === 'manager' ? '/manager-home' :
          data.role === 'movie-seller' ? '/movie-seller-home' :
          data.role === 'event-manager' ? '/event-manager-home' :
          data.role === 'super-admin' ? '/super-admin-home' :
          '/login'
        );
      } else {
        alert('Invalid credentials');
      }
    } catch (error) {
      console.error("There was an error logging in!", error);
      alert(`Error: ${error.message}`);
    }
  };

  return (
    <section className="bg-gray-50 dark:bg-gray-900">
      <div className="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
        <div className="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
          <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
            <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
              Log in to your account
            </h1>
            <form className="space-y-4 md:space-y-6" onSubmit={handleLogin}>
              <div>
                <label
                  htmlFor="email"
                  className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >
                  Your username
                </label>
                <input
                  type="name"
                  name="name"
                  id="name"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  placeholder="User Name"
                  required
                />
              </div>
              <div>
                <label
                  htmlFor="password"
                  className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >
                  Password
                </label>
                <input
                  type="password"
                  name="password"
                  id="password"
                  placeholder="••••••••"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  required
                />
              </div>
              <button
                type="submit"
                className="w-full text-white bg-blue-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
              >
                Enter
              </button>
              <p className="text-sm font-light text-gray-500 dark:text-gray-400">
                Don’t have an account yet?{" "}
                <a href="/signup" className="font-medium text-primary-600 hover:underline dark:text-primary-500">
                  Sign up
                </a>
              </p>
            </form>
          </div>
        </div>
      </div>
    </section>
  );
};

export default LoginPage;



import React, { useContext, useState } from 'react';
import axios from 'axios';
import Cookies from 'js-cookie';
import { useNavigate } from 'react-router-dom';
// import AuthContext from './AuthContext';
import axiosInstance from '../axiosInstance/axiosInstance'; // Import the custom Axios instance

// const axiosInstance = axios.create({
//   baseURL: 'https://movie.amirrezasoltani.ir',
//   headers: {
//     'Content-Type': 'application/json',
//     // 'Authorization': `Bearer ${token}`, // Add your token here
//   },
// });

// const Login = ({onLogin}) => {
//   // const { login } = useContext(AuthContext);
//   const [username, setUsername] = useState('');
//   const [password, setPassword] = useState('');
//   const [error, setError] = useState(null);
//   const navigate = useNavigate();

//   const handleLogin = async (e) => {
//     e.preventDefault();
//     try {
//       const response = await axios.post('https://movie.amirrezasoltani.ir/user/login', {
//         username,
//         password,
//       });
//       const { data } = response.data;

//       // Store token in cookies
//       Cookies.set('token', data.token, { expires: 7 });

//       // Fetch user details
//       const userResponse = await axiosInstance.get('/user');
//       const userData = userResponse.data;

//       // Optionally handle the role and redirect
//       if (userData && userData.role) {
//         onLogin(data.role); // Optionally set role in parent component if needed
//         navigate(
//           userData.role === 'user' ? '/user-home' :
//           userData.role === 'manager' ? '/manager-home' :
//           userData.role === 'movie-seller' ? '/movie-seller-home' :
//           userData.role === 'event-manager' ? '/event-manager-home' :
//           userData.role === 'super-admin' ? '/super-admin-home' :
//           '/login'
//         );
//       } else {
//         alert('Invalid credentials');
//       }
//     } catch (err) {
//       setError('There was an error logging in!');
//       console.error(err);
//     }
//   };

//   return (
//     <div className="min-h-screen flex items-center justify-center">
//       <form onSubmit={handleLogin} className="bg-white p-8 rounded shadow-md">
//         <h2 className="text-2xl mb-4">Login</h2>
//         {error && <div className="text-red-500 mb-4">{error}</div>}
//         <div className="mb-4">
//           <label className="block text-gray-700">Username</label>
//           <input
//             type="text"
//             value={username}
//             onChange={(e) => setUsername(e.target.value)}
//             className="w-full px-3 py-2 border rounded"
//           />
//         </div>
//         <div className="mb-4">
//           <label className="block text-gray-700">Password</label>
//           <input
//             type="password"
//             value={password}
//             onChange={(e) => setPassword(e.target.value)}
//             className="w-full px-3 py-2 border rounded"
//           />
//         </div>
//         <button type="submit" className="bg-indigo-500 text-white px-4 py-2 rounded">
//           Login
//         </button>
//       </form>
//     </div>
//   );
// };
// const LoginPage = ({ onLogin }) => {
//   const [email, setEmail] = useState('');
//   const [username, setUsername] = useState('');
//   const [password, setPassword] = useState('');
//   const navigate = useNavigate();

//   const handleLogin = async (event) => {
//     event.preventDefault(); // Prevent the default form submission

//     // const credentials = { username, password };
//     // const credentials = { Username: username, Email: email, Password: password };

//     console.log({ username, password });


//     try {
//       const response = await axios.post('https://movie.amirrezasoltani.ir/user/login', { Username: username, Email: email, Password: password });

//       if (!response.ok) {
//         throw new Error(`HTTP error! status: ${response.status}`);
//       }

//       // const data = await response.json();
//       console.log(response);
//       const { data } = response.data;
//       console.log(data);

//       // Store token in cookies
//       Cookies.set('token', data.token, { expires: 7 });

//       // Fetch user details
//       const userResponse = await axiosInstance.get('/user');
//       const userData = userResponse.data;

//       if (userData && userData.role) {
//         onLogin(userData.role); // Optionally set role in parent component if needed
//         navigate(
//           userData.role === 'user' ? '/user-home' :
//             userData.role === 'manager' ? '/manager-home' :
//               userData.role === 'movie-seller' ? '/movie-seller-home' :
//                 userData.role === 'event-manager' ? '/event-manager-home' :
//                   userData.role === 'super-admin' ? '/super-admin-home' :
//                     '/login'
//         );
//       } else {
//         alert('Invalid credentials');
//       }
//     } catch (error) {
//       console.error("There was an error logging in!", error);
//       alert(`Error: ${error.message}`);
//     }
//   };

//   return (
//     <section className="bg-gray-50 dark:bg-gray-900">
//       <div className="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
//         <div className="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
//           <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
//             <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
//               Log in to your account
//             </h1>
//             <form className="space-y-4 md:space-y-6" onSubmit={handleLogin}>
//               <div>
//                 <label
//                   htmlFor="email"
//                   className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
//                 >
//                   Your username
//                 </label>
//                 <input
//                   type="name"
//                   name="name"
//                   id="name"
//                   value={username}
//                   onChange={(e) => setUsername(e.target.value)}
//                   className="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
//                   placeholder="User Name"
//                   required
//                 />
//               </div>
//               <div>
//                 <label
//                   htmlFor="password"
//                   className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
//                 >
//                   Password
//                 </label>
//                 <input
//                   type="password"
//                   name="password"
//                   id="password"
//                   placeholder="••••••••"
//                   value={password}
//                   onChange={(e) => setPassword(e.target.value)}
//                   className="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
//                   required
//                 />
//               </div>
//               <button
//                 type="submit"
//                 className="w-full text-white bg-blue-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
//               >
//                 Enter
//               </button>
//               <p className="text-sm font-light text-gray-500 dark:text-gray-400">
//                 Don’t have an account yet?{" "}
//                 <a href="/signup" className="font-medium text-primary-600 hover:underline dark:text-primary-500">
//                   Sign up
//                 </a>
//               </p>
//             </form>
//           </div>
//         </div>
//       </div>
//     </section>
//   );
// };
const LoginPage = ({ onLogin }) => {
  const [email, setEmail] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (event) => {
    event.preventDefault(); // Prevent the default form submission

    const credentials = { Username: username, Email: email, Password: password };

    console.log({ username, password });

    try {
      const response = await fetch("http://localhost:8000/user/login", {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials),
      });

      // if (!response.ok) {
      //   throw new Error(`HTTP error! status: ${response.status}`);
      // }
      if (!response.ok) {
        throw new Error(`Invalid Credentias`);
      }


      const { data } = await response.json();
      console.log("Data>>>", data);
      console.log("Data Token>>>", data.token);



      localStorage.setItem('token', (data.token));



      //  Fetch user details
      const userResponse = await axiosInstance.get('/user',

      );
      console.log(userResponse);
      const userData = userResponse.data;

      console.log(userData.data);


      if (userData.data && userData.data.Role) {

        onLogin(userData.data.Role,userData.data); // Optionally set role in parent component if needed
        // navigate(
        //   userData.data.Role === 'user' ? '/user-home' :
        //     userData.data.Role === 'manager' ? '/manager-home' :
        //       userData.data.Role === 'movie-seller' ? '/movie-seller-home' :
        //         userData.data.Role === 'event-manager' ? '/event-manager-home' :
        //           userData.data.Role === 'super-admin' ? '/super-admin-home' :
        //             '/login'
        // );
        const role = userData.data.Role;
console.log("User Role:", role);

if (role === 'user') {
    navigate('/user-home');
} else if (role === 'manager') {
    navigate('/manager-home');
} else if (role === 'movie-seller') {
    navigate('/movie-seller-home');
} else if (role === 'event-manager') {
    navigate('/event-manager-home');
} else if (role === 'super-admin') {
    navigate('/super-admin-home');
} else {
    navigate('/login');
}
      }
      else {
        alert('Invalid credentials');
      }
    } catch (error) {
      console.error("There was an error logging in!", error);
      alert(`Error: ${error.message}`);
    }
  };

  return (
    <section className="bg-gray-50 dark:bg-gray-900">
      <div className="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
        <div className="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
          <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
            <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
              Log in to your account
            </h1>
            <form className="space-y-4 md:space-y-6" onSubmit={handleLogin}>
              <div>
                <label
                  htmlFor="email"
                  className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >
                  Your username
                </label>
                <input
                  type="name"
                  name="name"
                  id="name"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  placeholder="User Name"
                  required
                />
              </div>
              <div>
                <label
                  htmlFor="password"
                  className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >
                  Password
                </label>
                <input
                  type="password"
                  name="password"
                  id="password"
                  placeholder="••••••••"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  required
                />
              </div>
              <button
                type="submit"
                className="w-full text-white bg-blue-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
              >
                Enter
              </button>
              <p className="text-sm font-light text-gray-500 dark:text-gray-400">
                Don’t have an account yet?{" "}
                <a href="/signup" className="font-medium text-primary-600 hover:underline dark:text-primary-500">
                  Sign up
                </a>
              </p>
            </form>
          </div>
        </div>
      </div>
    </section>
  );
};

export default LoginPage;

const LoginPage = ({ onLogin }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (event) => {
    event.preventDefault(); // Prevent the default form submission

    const credentials = { Username: username, Password: password }; // Match with backend expectations

    console.log({ username, password });

    try {
      const response = await fetch("http://localhost:8000/user/login", {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials),
      });

      if (!response.ok) {
        throw new Error(`Invalid credentials`);
      }

      const data = await response.json(); // Get the actual data object
      console.log("Data>>>", data);
      console.log("Data Token>>>", data.data.token);

      // Store token in localStorage
      localStorage.setItem('token', data.data.token);

      // Fetch user details using axios
      const userResponse = await axiosInstance.get('/user', {
        headers: {
          Authorization: `Bearer ${data.data.token}`,
        },
      });

      const userData = userResponse.data.data;
      console.log(userData);

      if (userData && userData.Role) {
        onLogin(userData.Role, userData); // Optionally set role in parent component if needed

        const role = userData.Role;
        console.log("User Role:", role);

        if (role === 'user') {
          navigate('/user-home');
        } else if (role === 'manager') {
          navigate('/manager-home');
        } else if (role === 'movie-seller') {
          navigate('/movie-seller-home');
        } else if (role === 'event-manager') {
          navigate('/event-manager-home');
        } else if (role === 'super-admin') {
          navigate('/super-admin-home');
        } else {
          navigate('/login');
        }
      }
      else {
        alert('Invalid credentials');
      }
    } catch (error) {
      console.error("There was an error logging in!", error);
      alert(`Error: ${error.message}`);
    }
  };

  return (
    <section className="bg-gray-50 dark:bg-gray-900">
      <div className="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
        <div className="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
          <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
            <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
              Log in to your account
            </h1>
            <form className="space-y-4 md:space-y-6" onSubmit={handleLogin}>
              <div>
                <label
                  htmlFor="username"
                  className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >
                  Your username
                </label>
                <input
                  type="text"
                  name="username"
                  id="username"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  placeholder="Username"
                  required
                />
              </div>
              <div>
                <label
                  htmlFor="password"
                  className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >
                  Password
                </label>
                <input
                  type="password"
                  name="password"
                  id="password"
                  placeholder="••••••••"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  required
                />
              </div>
              <button
                type="submit"
                className="w-full text-white bg-blue-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
              >
                Enter
              </button>
              <p className="text-sm font-light text-gray-500 dark:text-gray-400">
                Don’t have an account yet?{" "}
                <a href="/signup" className="font-medium text-primary-600 hover:underline dark:text-primary-500">
                  Sign up
                </a>
              </p>
            </form>
          </div>
        </div>
      </div>
    </section>
  );
};




export default LoginPage;