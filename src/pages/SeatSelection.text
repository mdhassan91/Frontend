//Full Working Version

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

import axios from 'axios';
import { Link } from 'react-router-dom';


const SeatSelection = ({ user }) => {
  const [selectedSeats, setSelectedSeats] = useState([]);
  const { id } = useParams();
  console.log(user);

  const [ticketPrice, setTicketPrice] = useState(10);
  const [selectedCategory, setSelectedCategory] = useState('A');
  const [seats, setSeats] = useState({});
  const [occupiedSeats, setOccupiedSeats] = useState({});
  // const [eventId, setEventId] = useState('669d33f375d8807ea7470749'); // Set this to the event ID
  const [eventId, setEventId] = useState(id); // Set this to the event ID

  const [showConfirmation, setShowConfirmation] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);

  const seatCategories = {
    A: { price: 10, label: 'Cheap' },
    B: { price: 20, label: 'Budget' },
    C: { price: 30, label: 'Luxury' },
  };

  const seatsPerRow = 5;

  useEffect(() => {
    const fetchEventData = () => {
      axios.get(`http://localhost:8000/event/${eventId}`).then(response => {
        const event = response.data.data;
        const occupied = {};
        const seats = {};

        event.Seats.forEach(seat => {
          if (!seats[seat.row]) seats[seat.row] = [];
          seats[seat.row].push(seat);

          if (!seat.isAvailable) {
            if (!occupied[seat.row]) occupied[seat.row] = [];
            occupied[seat.row].push(seat.number);
          }
        });

        setSeats(seats);
        console.log("Checking Seats>>>>",seats);
        
        setOccupiedSeats(occupied);
      });
    };

    fetchEventData();
    const intervalId = setInterval(fetchEventData, 5000); // Polling every 5 seconds

    return () => clearInterval(intervalId);
  }, [eventId]);

  const handleSeatClick = (category, row, number) => {
    setSelectedSeats((prevSelectedSeats) => {
      const seatId = `${category}-${row}-${number}`;
      console.log(seatId);
      
      if (prevSelectedSeats.includes(seatId)) {
        return prevSelectedSeats.filter(seat => seat !== seatId);
      } else {
        return [...prevSelectedSeats, seatId];
      }
    });
  };

  const handleMovieSelect = (e) => {
    setTicketPrice(Number(e.target.value));
  };

  const handleCategorySelect = (e) => {
    setSelectedCategory(e.target.value);
    setTicketPrice(seatCategories[e.target.value].price);
  };

  const handleReserve = () => {
    setShowConfirmation(true);
  };

  const handleCancel = () => {
    setShowConfirmation(false);
  };

  const handleProceed = () => {
    const seatsToReserve = selectedSeats.map(seat => {
      const [category, row, number] = seat.split('-');
      return { row: Number(row), number: Number(number) };
    });

    // const payload = {
    //   eventId,
    //   userId: '669689b8f0f4cd6a85764f92', // Replace with actual user ID
    //   seats: seatsToReserve,
    // };
    const payload = {
      eventId,
      userId: user._id, // Replace with actual user ID
      Firstname: user.Name,
      seats: seatsToReserve,
    };


    axios.post('http://localhost:8000/reserve', payload)
      .then(response => {
        alert(response.data.message);

        // Update occupied seats after reservation
        const updatedSeats = response.data.seats;
        const newOccupiedSeats = { ...occupiedSeats };
        updatedSeats.forEach(seat => {
          if (!newOccupiedSeats[seat.row]) newOccupiedSeats[seat.row] = [];
          newOccupiedSeats[seat.row].push(seat.number);
        });
        console.log(newOccupiedSeats);
        

        setOccupiedSeats(newOccupiedSeats);
        setSelectedSeats([]);
        setShowConfirmation(false);
        setShowSuccess(true);
      })
      .catch(err => {
        console.error(err);
      });
  };

  const closeSuccessModal = () => {
    setShowSuccess(false);
  };

  const currentMovie = {
    // movieName: 'Avenger',
    price: ticketPrice
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white font-lato p-4">
      <section className="w-full max-w-4xl text-center mb-8">
        <div className="flex justify-center space-x-4 mb-4">
          {/* <div>
            <label className="block mb-2">Pick a movie:</label>
            <select id="movies" className="bg-white text-black rounded-lg p-2" onChange={handleMovieSelect}>
              <option value="10">Avenger($10)</option>
              <option value="12">Joker($12)</option>
              <option value="8">Toy story($8)</option>
              <option value="9">The Lion King($9)</option>
            </select>
          </div>
          <div>
            <label className="block mb-2">Pick a seat category:</label>
            <select id="categories" className="bg-white text-black rounded-lg p-2" onChange={handleCategorySelect}>
              {Object.entries(seatCategories).map(([key, value]) => (
                <option key={key} value={key}>
                  {value.label} (${value.price})
                </option>
              ))}
            </select>
          </div> */}
        </div>
        <ul className="flex justify-center items-center list-none mb-4 bg-black bg-opacity-20 rounded-lg p-2">
          <li className="flex items-center text-xs mx-2">
            <div className="w-4 h-4 bg-gray-700 mr-1"></div>
            <small>N/A</small>
          </li>
          <li className="flex items-center text-xs mx-2">
            <div className="w-4 h-4 bg-blue-400 mr-1"></div>
            <small>Selected</small>
          </li>
          <li className="flex items-center text-xs mx-2">
            <div className="w-4 h-4 bg-white mr-1"></div>
            <small>Occupied</small>
          </li>
        </ul>
        {/* <div className="flex flex-col items-center bg-gray-800 p-6 rounded-lg mt-4 shadow-lg"> */}
        <div className="flex flex-col items-center bg-gray-800 p-6 rounded-lg mt-4 shadow-lg">
          {Object.entries(seats).map(([row, seatsArray]) => (
            <div key={row} className="mb-2">
              <h3 className="text-blue-400 mb-2">Row {row}</h3>
              {Array.from({ length: Math.ceil(seatsArray.length / seatsPerRow) }, (_, rowIndex) => (
                <div key={rowIndex} className="flex justify-center flex-wrap mb-1">
                  {seatsArray.slice(rowIndex * seatsPerRow, (rowIndex + 1) * seatsPerRow).map((seat, index) => (
                    <div
                      key={index}
                      className={`w-10 h-8 m-1 flex items-center justify-center rounded-full text-xs cursor-pointer transform transition-transform duration-200 ${occupiedSeats[row] && occupiedSeats[row].includes(seat.number)
                        ? 'bg-white cursor-not-allowed'
                        : selectedSeats.includes(`${selectedCategory}-${row}-${seat.number}`)
                          ? 'bg-blue-400'
                          : 'bg-gray-700 hover:bg-gray-600 hover:scale-110'
                        }`}
                      onClick={() =>
                        !(occupiedSeats[row] && occupiedSeats[row].includes(seat.number)) &&
                        handleSeatClick(selectedCategory, row, seat.number)
                      }
                    >
                      {seat.number}
                    </div>
                  ))}
                </div>
              ))}
            </div>
          ))}
        </div>
        {/* <div className="flex flex-col items-center bg-gray-800 p-4 rounded-lg mt-4 shadow-lg">
          <div className="bg-white w-3/4 h-10 mb-4 transform rotate-x-12 shadow-lg rounded-lg"></div>
          {Object.entries(seats).map(([row, seatsArray]) => (
            <div key={row} className="mb-4">
              <h3 className="text-blue-400 mb-2">Row {row}</h3>
              {Array.from({ length: Math.ceil(seatsArray.length / seatsPerRow) }, (_, rowIndex) => (
                <div key={rowIndex} className="flex justify-center flex-wrap mb-2">
                  {seatsArray.slice(rowIndex * seatsPerRow, (rowIndex + 1) * seatsPerRow).map((seat, index) => (
                    <div
                      key={index}
                      className={`w-5 h-5 m-1 flex items-center justify-center rounded-full text-xs cursor-pointer transform transition-transform duration-200 ${occupiedSeats[row] && occupiedSeats[row].includes(seat.number) ? 'bg-white cursor-not-allowed' : selectedSeats.includes(`${selectedCategory}-${row}-${seat.number}`) ? 'bg-blue-400' : 'bg-gray-700 hover:bg-gray-600 hover:scale-110'}`}
                      onClick={() => !(occupiedSeats[row] && occupiedSeats[row].includes(seat.number)) && handleSeatClick(selectedCategory, row, seat.number)}
                    >
                      {seat.number}
                    </div>
                  ))}
                </div>
              ))}
            </div>
          ))}
        </div> */}
      </section>
      <p className="mt-4 text-lg">
        You have selected <span className="text-blue-400">{selectedSeats.length}</span> seat(s) for a price of â‚¹<span className="text-blue-400">{selectedSeats.length * ticketPrice}</span>
      </p>
      <button className="bg-blue-400 text-white rounded-lg p-2 mt-4" onClick={handleReserve}>Reserve</button>

      {showConfirmation && (
        <Confirmation
          currentMovie={currentMovie}
          takenSeats={selectedSeats}
          onCancel={handleCancel}
          onProceed={handleProceed}
        />
      )}

      {showSuccess && (
        <SuccessModal onClose={closeSuccessModal} />
      )}
    </div>
  );
};

const Confirmation = ({ currentMovie, takenSeats, onCancel, onProceed }) => {
  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg text-center">
        <h2 className="text-xl text-black  mb-4">Confirm Your Booking</h2>
        <p className=" text-black ">Movie: <span className="font-bold text-black ">{currentMovie.movieName}</span></p>
        <p className=" text-black ">Seats: <span className="font-bold text-black ">{takenSeats.length}</span></p>
        <p className=" text-black ">Total Price: <span className="font-bold text-black ">â‚¹{currentMovie.price * takenSeats.length}</span></p>
        <div className="flex justify-center mt-4">
          <button className="bg-blue-400 text-white rounded-lg p-2 mx-2" onClick={onProceed}>Proceed</button>
          <button className="bg-gray-500 text-white rounded-lg p-2 mx-2" onClick={onCancel}>Cancel</button>
        </div>
      </div>
    </div>
  );
};

const SuccessModal = ({ onClose }) => {
  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg text-center">
        <h2 className="text-xl text-black mb-4">Booking Successful!</h2>
        <p className="text-green-500">Your seats have been reserved successfully.</p>
        <button className="bg-blue-400 text-white rounded-lg p-2 mt-4" onClick={onClose}>Close</button>
        <Link to={`/user-home`} className="bg-blue-400 text-white rounded-lg p-2 mt-4" >Home</Link>

      </div>
    </div>
  );
};

export default SeatSelection;


import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

import axios from 'axios';
import { Link } from 'react-router-dom';


const SeatSelection = ({ user }) => {
  const [selectedSeats, setSelectedSeats] = useState([]);
  const { id } = useParams();
  console.log(user);

  const [ticketPrice, setTicketPrice] = useState(10);
  const [selectedCategory, setSelectedCategory] = useState('A');
  const [seats, setSeats] = useState({});
  const [occupiedSeats, setOccupiedSeats] = useState({});
  // const [eventId, setEventId] = useState('669d33f375d8807ea7470749'); // Set this to the event ID
  const [eventId, setEventId] = useState(id); // Set this to the event ID

  const [showConfirmation, setShowConfirmation] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);

  const seatCategories = {
    A: { price: 10, label: 'Cheap' },
    B: { price: 20, label: 'Budget' },
    C: { price: 30, label: 'Luxury' },
  };

  const seatsPerRow = 5;

  useEffect(() => {
    const fetchEventData = () => {
      axios.get(`http://localhost:8000/event/${eventId}`).then(response => {
        const event = response.data.data;
        const occupied = {};
        const seats = {};

        event.Seats.forEach(seat => {
          if (!seats[seat.row]) seats[seat.row] = [];
          seats[seat.row].push(seat);

          if (!seat.isAvailable) {
            if (!occupied[seat.row]) occupied[seat.row] = [];
            occupied[seat.row].push(seat.number);
          }
        });

        setSeats(seats);
        console.log("Checking Seats>>>>",seats);
        
        setOccupiedSeats(occupied);
      });
    };

    fetchEventData();
    const intervalId = setInterval(fetchEventData, 5000); // Polling every 5 seconds

    return () => clearInterval(intervalId);
  }, [eventId]);

  // const handleSeatClick = (category, row, number) => {
  //   setSelectedSeats((prevSelectedSeats) => {
  //     const seatId = `${category}-${row}-${number}`;
  //     console.log(seatId);
      
  //     if (prevSelectedSeats.includes(seatId)) {
  //       return prevSelectedSeats.filter(seat => seat !== seatId);
  //     } else {
  //       return [...prevSelectedSeats, seatId];
  //     }
  //   });
  // };
  const handleSeatClick = (category, row, seat) => {
    setSelectedSeats((prevSelectedSeats) => {
      const seatId = `${category}-${row}-${seat.number}-${seat._id}`;  // Include the reserveID (_id) here
      console.log(seatId);
      
      if (prevSelectedSeats.some(s => s.seatId === seatId)) {
        return prevSelectedSeats.filter(s => s.seatId !== seatId);
      } else {
        return [...prevSelectedSeats, { category, row, number: seat.number, reserveID: seat._id }];
      }
    });
  };
  
  const handleMovieSelect = (e) => {
    setTicketPrice(Number(e.target.value));
  };

  const handleCategorySelect = (e) => {
    setSelectedCategory(e.target.value);
    setTicketPrice(seatCategories[e.target.value].price);
  };

  const handleReserve = () => {
    setShowConfirmation(true);
  };

  const handleCancel = () => {
    setShowConfirmation(false);
  };

  const handleProceed = () => {
    // const seatsToReserve = selectedSeats.map(seat => {
    //   const [category, row, number] = seat.split('-');
    //   return { row: Number(row), number: Number(number), };
    // });
    const seatsToReserve = selectedSeats.map(seat => {
      return {
        row: Number(seat.row),
        number: Number(seat.number),
        reserveID: seat.reserveID,  // Include reserveID in the payload
      };
    });

    // const payload = {
    //   eventId,
    //   userId: '669689b8f0f4cd6a85764f92', // Replace with actual user ID
    //   seats: seatsToReserve,
    // };
    const payload = {
      eventId,
      userId: user._id, // Replace with actual user ID
      Firstname: user.Name,
      seats: seatsToReserve,
    };


    axios.post('http://localhost:8000/reserve', payload)
      .then(response => {
        alert(response.data.message);

        // Update occupied seats after reservation
        const updatedSeats = response.data.seats;
        const newOccupiedSeats = { ...occupiedSeats };
        updatedSeats.forEach(seat => {
          if (!newOccupiedSeats[seat.row]) newOccupiedSeats[seat.row] = [];
          newOccupiedSeats[seat.row].push(seat.number);
        });
        console.log(newOccupiedSeats);
        

        setOccupiedSeats(newOccupiedSeats);
        setSelectedSeats([]);
        setShowConfirmation(false);
        setShowSuccess(true);
      })
      .catch(err => {
        console.error(err);
      });
  };

  const closeSuccessModal = () => {
    setShowSuccess(false);
  };

  const currentMovie = {
    // movieName: 'Avenger',
    price: ticketPrice
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white font-lato p-4">
      <section className="w-full max-w-4xl text-center mb-8">
        <div className="flex justify-center space-x-4 mb-4">
          {/* <div>
            <label className="block mb-2">Pick a movie:</label>
            <select id="movies" className="bg-white text-black rounded-lg p-2" onChange={handleMovieSelect}>
              <option value="10">Avenger($10)</option>
              <option value="12">Joker($12)</option>
              <option value="8">Toy story($8)</option>
              <option value="9">The Lion King($9)</option>
            </select>
          </div>
          <div>
            <label className="block mb-2">Pick a seat category:</label>
            <select id="categories" className="bg-white text-black rounded-lg p-2" onChange={handleCategorySelect}>
              {Object.entries(seatCategories).map(([key, value]) => (
                <option key={key} value={key}>
                  {value.label} (${value.price})
                </option>
              ))}
            </select>
          </div> */}
        </div>
        <ul className="flex justify-center items-center list-none mb-4 bg-black bg-opacity-20 rounded-lg p-2">
          <li className="flex items-center text-xs mx-2">
            <div className="w-4 h-4 bg-gray-700 mr-1"></div>
            <small>N/A</small>
          </li>
          <li className="flex items-center text-xs mx-2">
            <div className="w-4 h-4 bg-blue-400 mr-1"></div>
            <small>Selected</small>
          </li>
          <li className="flex items-center text-xs mx-2">
            <div className="w-4 h-4 bg-white mr-1"></div>
            <small>Occupied</small>
          </li>
        </ul>
        {/* <div className="flex flex-col items-center bg-gray-800 p-6 rounded-lg mt-4 shadow-lg"> */}
        <div className="flex flex-col items-center bg-gray-800 p-6 rounded-lg mt-4 shadow-lg">
          {Object.entries(seats).map(([row, seatsArray]) => (
            <div key={row} className="mb-2">
              <h3 className="text-blue-400 mb-2">Row {row}</h3>
              {Array.from({ length: Math.ceil(seatsArray.length / seatsPerRow) }, (_, rowIndex) => (
                <div key={rowIndex} className="flex justify-center flex-wrap mb-1">
                  {seatsArray.slice(rowIndex * seatsPerRow, (rowIndex + 1) * seatsPerRow).map((seat, index) => (
                    <div
                      key={index}
                      className={`w-10 h-8 m-1 flex items-center justify-center rounded-full text-xs cursor-pointer transform transition-transform duration-200 ${occupiedSeats[row] && occupiedSeats[row].includes(seat.number)
                        ? 'bg-white cursor-not-allowed'
                        : selectedSeats.includes(`${selectedCategory}-${row}-${seat.number}`)
                          ? 'bg-blue-400'
                          : 'bg-gray-700 hover:bg-gray-600 hover:scale-110'
                        }`}
                      onClick={() =>
                        !(occupiedSeats[row] && occupiedSeats[row].includes(seat.number)) &&
                        handleSeatClick(selectedCategory, row, seat)
                      }
                    >
                      {seat.number}
                    </div>
                  ))}
                </div>
              ))}
            </div>
          ))}
        </div>
        {/* <div className="flex flex-col items-center bg-gray-800 p-4 rounded-lg mt-4 shadow-lg">
          <div className="bg-white w-3/4 h-10 mb-4 transform rotate-x-12 shadow-lg rounded-lg"></div>
          {Object.entries(seats).map(([row, seatsArray]) => (
            <div key={row} className="mb-4">
              <h3 className="text-blue-400 mb-2">Row {row}</h3>
              {Array.from({ length: Math.ceil(seatsArray.length / seatsPerRow) }, (_, rowIndex) => (
                <div key={rowIndex} className="flex justify-center flex-wrap mb-2">
                  {seatsArray.slice(rowIndex * seatsPerRow, (rowIndex + 1) * seatsPerRow).map((seat, index) => (
                    <div
                      key={index}
                      className={`w-5 h-5 m-1 flex items-center justify-center rounded-full text-xs cursor-pointer transform transition-transform duration-200 ${occupiedSeats[row] && occupiedSeats[row].includes(seat.number) ? 'bg-white cursor-not-allowed' : selectedSeats.includes(`${selectedCategory}-${row}-${seat.number}`) ? 'bg-blue-400' : 'bg-gray-700 hover:bg-gray-600 hover:scale-110'}`}
                      onClick={() => !(occupiedSeats[row] && occupiedSeats[row].includes(seat.number)) && handleSeatClick(selectedCategory, row, seat.number)}
                    >
                      {seat.number}
                    </div>
                  ))}
                </div>
              ))}
            </div>
          ))}
        </div> */}
      </section>
      <p className="mt-4 text-lg">
        You have selected <span className="text-blue-400">{selectedSeats.length}</span> seat(s) for a price of â‚¹<span className="text-blue-400">{selectedSeats.length * ticketPrice}</span>
      </p>
      <button className="bg-blue-400 text-white rounded-lg p-2 mt-4" onClick={handleReserve}>Reserve</button>

      {showConfirmation && (
        <Confirmation
          currentMovie={currentMovie}
          takenSeats={selectedSeats}
          onCancel={handleCancel}
          onProceed={handleProceed}
        />
      )}

      {showSuccess && (
        <SuccessModal onClose={closeSuccessModal} />
      )}
    </div>
  );
};

const Confirmation = ({ currentMovie, takenSeats, onCancel, onProceed }) => {
  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg text-center">
        <h2 className="text-xl text-black  mb-4">Confirm Your Booking</h2>
        <p className=" text-black ">Movie: <span className="font-bold text-black ">{currentMovie.movieName}</span></p>
        <p className=" text-black ">Seats: <span className="font-bold text-black ">{takenSeats.length}</span></p>
        <p className=" text-black ">Total Price: <span className="font-bold text-black ">â‚¹{currentMovie.price * takenSeats.length}</span></p>
        <div className="flex justify-center mt-4">
          <button className="bg-blue-400 text-white rounded-lg p-2 mx-2" onClick={onProceed}>Proceed</button>
          <button className="bg-gray-500 text-white rounded-lg p-2 mx-2" onClick={onCancel}>Cancel</button>
        </div>
      </div>
    </div>
  );
};

const SuccessModal = ({ onClose }) => {
  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg text-center">
        <h2 className="text-xl text-black mb-4">Booking Successful!</h2>
        <p className="text-green-500">Your seats have been reserved successfully.</p>
        <button className="bg-blue-400 text-white rounded-lg p-2 mt-4" onClick={onClose}>Close</button>
        <Link to={`/user-home`} className="bg-blue-400 text-white rounded-lg p-2 mt-4" >Home</Link>

      </div>
    </div>
  );
};

export default SeatSelection;
